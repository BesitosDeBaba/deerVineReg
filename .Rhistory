#nombre: character, nombre con el caul se va guardar la imagen.
#Retorna un 1, si la función tiene éxito.
plot_effects <- function(datos, variable, copulas, alpha, nombre){
data <- data.frame(datos)
medias <- colMeans(datos)
#Se crea un data.frame auxilar con las medias de las otras variables
#que no son la respuesta y la desada
for (var in colnames(redMujeres)) {
if (!(var %in% variable)){
data[var] <- medias[var]
}
}
#Se hace la regresión pasra distintos niveles de alpha
datosAlphas <- data.frame(matrix(ncol = length(alpha), nrow = nrow(data)))
colnames(datosAlphas) <- as.character(alpha)
for (i in 1:length(alpha)){
datosAlphas[,i] <- regresionPred(datos, data, datos[,1], alpha[i], copulas)
}
datosAlphas$x <- datos[[variable[2]]]
#Se un pivote para poder graficar los efectos
dfgraf <- datosAlphas %>% pivot_longer(!x, names_to = "Alphas", values_to = "Pred")
#Se hace la grafica
graf <- ggplot(dfgraf, aes(x = x, y = Pred, colour = Alphas)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ splines::bs(x, 3), se = T) + #geom_smooth(se = FALSE) +
ylab('Q(a)') + xlab(paste0(variable[2])) + ggtitle('Grafica de Efectos')
ggsave(graf, file = paste0(nombre, '.png'), width = 4.5, height = 4)
return(1)
}
alleffect(redMujeres, y = 'FBIGC', copulas = copulas_selectM,
id = 'Muj', alphas = c(0.1, 0.5, 0.9))
#Función que hace la grafica de efectos de todas las variables de un modelo.
#Recide como parametros:
#datos: data.frame, con todos los datos originales del modelo (incluyendo la
#     la variable respuesta)
#y: vector o dataframe con la variable respuesta
#copula: lista que contiene todas las copulas ajustadas del modelo
#id: string, que contiene el identificador que se va a poner en el nombre
#   de la imagen cuando se guarde
#alphas: vector de double. Vector que contiene los niveles con los que
#       se va a hacer la regresión cuantil.
alleffect <- function(datos, y, copulas, id, alphas){
for (var in colnames(datos[-c(1)])){
plot_effects(datos, c(y, var), copulas,
alphas, paste0(id, var, 'Efec'))
}
}
alleffect(redMujeres, y = 'FBIGC', copulas = copulas_selectM,
id = 'Muj', alphas = c(0.1, 0.5, 0.9))
alleffect(redTotal, y = 'FBIGC', copulas = copulas_selectT,
id = 'Total', alphas = c(0.1, 0.5, 0.9))
alleffect(redHombres, y = 'FBIGC', copulas = copulas_selectH,
id = 'Hom', alphas = c(0.1, 0.5, 0.9))
#deseadas. Recibe como argumentos:
#datos: un dataframe con los datos originales, (incluye la variable respuesta)
#variable: vector 2 dimensional, c(respuesta, efecto), la primer entrada
#   corresponde a la variable respuesta y la segunda la variable a la cual se
#   se le desea obtener los efectos.
#copulas: lista, contiene las copulas obtenidas del modelo
#alpha: vector de double, el nivel alpha con el cual se va a hacer
#       la regresión cuantil
#nombre: character, nombre con el caul se va guardar la imagen.
#Retorna un 1, si la función tiene éxito.
plot_effects <- function(datos, variable, copulas, alpha, nombre){
data <- data.frame(datos)
medias <- colMeans(datos)
#Se crea un data.frame auxilar con las medias de las otras variables
#que no son la respuesta y la desada
for (var in colnames(redMujeres)) {
if (!(var %in% variable)){
data[var] <- medias[var]
}
}
#Se hace la regresión pasra distintos niveles de alpha
datosAlphas <- data.frame(matrix(ncol = length(alpha), nrow = nrow(data)))
colnames(datosAlphas) <- as.character(alpha)
for (i in 1:length(alpha)){
datosAlphas[,i] <- regresionPred(datos, data, datos[,1], alpha[i], copulas)
}
datosAlphas$x <- datos[[variable[2]]]
#Se un pivote para poder graficar los efectos
dfgraf <- datosAlphas %>% pivot_longer(!x, names_to = "Alphas", values_to = "Pred")
#Se hace la grafica
graf <- ggplot(dfgraf, aes(x = x, y = Pred, colour = Alphas)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ splines::bs(x, 3), se = FALSE) + #geom_smooth(se = FALSE) +
ylab('Q(a)') + xlab(paste0(variable[2])) + ggtitle('Grafica de Efectos')
ggsave(graf, file = paste0(nombre, '.png'), width = 4.5, height = 4)
return(1)
}
alleffect(redMujeres, y = 'FBIGC', copulas = copulas_selectM,
id = 'Muj', alphas = c(0.1, 0.5, 0.9))
alleffect(redHombres, y = 'FBIGC', copulas = copulas_selectH,
id = 'Hom', alphas = c(0.1, 0.5, 0.9))
alleffect(redTotal, y = 'FBIGC', copulas = copulas_selectT,
id = 'Total', alphas = c(0.1, 0.5, 0.9))
#deseadas. Recibe como argumentos:
#datos: un dataframe con los datos originales, (incluye la variable respuesta)
#variable: vector 2 dimensional, c(respuesta, efecto), la primer entrada
#   corresponde a la variable respuesta y la segunda la variable a la cual se
#   se le desea obtener los efectos.
#copulas: lista, contiene las copulas obtenidas del modelo
#alpha: vector de double, el nivel alpha con el cual se va a hacer
#       la regresión cuantil
#nombre: character, nombre con el caul se va guardar la imagen.
#Retorna un 1, si la función tiene éxito.
plot_effects <- function(datos, variable, copulas, alpha, nombre){
data <- data.frame(datos)
medias <- colMeans(datos)
#Se crea un data.frame auxilar con las medias de las otras variables
#que no son la respuesta y la desada
for (var in colnames(redMujeres)) {
if (!(var %in% variable)){
data[var] <- medias[var]
}
}
#Se hace la regresión pasra distintos niveles de alpha
datosAlphas <- data.frame(matrix(ncol = length(alpha), nrow = nrow(data)))
colnames(datosAlphas) <- as.character(alpha)
for (i in 1:length(alpha)){
datosAlphas[,i] <- regresionPred(datos, data, datos[,1], alpha[i], copulas)
}
datosAlphas$x <- datos[[variable[2]]]
#Se un pivote para poder graficar los efectos
dfgraf <- datosAlphas %>% pivot_longer(!x, names_to = "Alphas", values_to = "Pred")
#Se hace la grafica
graf <- ggplot(dfgraf, aes(x = x, y = Pred, colour = Alphas)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ splines::bs(x, 5), se = FALSE) + #geom_smooth(se = FALSE) +
ylab('Q(a)') + xlab(paste0(variable[2])) + ggtitle('Grafica de Efectos')
ggsave(graf, file = paste0(nombre, '.png'), width = 4.5, height = 4)
return(1)
}
alleffect(redTotal, y = 'FBIGC', copulas = copulas_selectT,
id = 'Total', alphas = c(0.1, 0.5, 0.9))
alleffect(redMujeres, y = 'FBIGC', copulas = copulas_selectM,
id = 'Muj', alphas = c(0.1, 0.5, 0.9))
alleffect(redHombres, y = 'FBIGC', copulas = copulas_selectH,
id = 'Hom', alphas = c(0.1, 0.5, 0.9))
setwd('C:/Users/zaboo/OneDrive/Documentos/CIMAT/Tesis/codigo/Mio')
source('TBDs.R')
source('Funciones.R')
source('Graficas.R')
source('funPred.R')
source('heats.R')
#A Q U I  E M P I E Z A
mujeres <- read.csv('Mujeres.csv')
hombres <- read.csv('Hombres.csv')
setwd('C:/Users/zaboo/OneDrive/Documentos/CIMAT/Tesis/codigo/Mio')
#A Q U I  E M P I E Z A
mujeres <- read.csv('Mujeres.csv')
hombres <- read.csv('Hombres.csv')
mujeres <- mujeres[-c(1)]
hombres <- hombres[-c(1)]
baseTotal <- read.csv('baseBrenda.csv')
source('PreparaBase.R')
#Genereamos la respuesta de la base completa
baseTotal$TBDglu= TBDfuncion(baseTotal[,6:10])[[1]]
baseTotal$TBDins= TBDfuncion(baseTotal[,12:16])[[1]]
baseTotal$FBIGC <- FBIGCgenera(baseTotal)
baseTotal <- subset(baseTotal, !is.na(baseTotal$PA.diast))
load('4variables.Rdata')
cee<-function(datos)
{
F<-function(i,k)
{
n=length(k)
datos=rep(0,(n+1))
datos[k[1:i]]=rep(1/n,i)
datos=cumsum(datos)
datos
}
n=length(datos[,1])
copula<-matrix(nrow=(n+1),ncol=(n+1))
ii<-order(datos[,2])
h<-rbind(datos[,1],datos[,2])[,ii]
k<-order(h[1,])+1
r=k
copula[1,]=rep(0,(n+1))
copula[2:(n+1),]=t(sapply(c(1:n),F,k=r))
copula
}
diagonal<-function(datos,nombre)
{
copula=cee(datos)
d=dim(copula)
diag=vector(mode="numeric",length=d[1])
for(i in 1:d[1])
{
diag[i]=copula[i,i]
}
Md<-function(u) u
Pd<-function(u) u^2
Wd<-function(u) max(2*u-1,0)
w=sapply(seq(0,1,.01),Wd)
p=sapply(seq(0,1,1/(d[1]-1)),Pd)
m=sapply(seq(0,1,1/(d[1]-1)),Md)
plot(seq(0,1,.01),w,type="l",col="red",main=nombre)
lines(seq(0,1,1/(d[1]-1)),p,col="blue")
lines(seq(0,1,1/(d[1]-1)),m,col="green")
lines(seq(0,1,1/(d[1]-1)),diag,col=30)
df=diag[-c(1,d[1])]-p[-c(1,d[1])]
}
Q<-function(u,datos)
{
n=length(datos)
q=sort(datos)
eo<-c(q[1],q,q[n])
sum=0
for(i in 0:n)
{
sum=sum+(eo[i+1]+eo[i+2])/2*dbinom(i,n,u)
}
sum
}
pui<-function(t,uu,ve,cop)
{
fauxu<-function(i,u,n)
{
a=0
a=dbinom(i,n,u)*(i-u*n)/(u*(1-u))
a
}
h<-function(a,b)
{
c=a*b
c
}
m=length(cop[,1])-1
sv<- sapply(c(0:m),dbinom,size=m,prob=ve)
su<- sapply(c(0:m),fauxu,u=uu,n=m)
pui=sapply(sv,h,b=su)*cop
sum(pui)-t
}
Qi<-function(u,x,vec)
{
n=length(vec)
q=sort(vec)
eo<-c(q[1],q,q[n])
sum=0
for(i in 0:n)
{
sum=sum+(eo[i+1]+eo[i+2])/2*dbinom(i,n,u)
}
sum-x
}
rcop_alfa<-function(pred,datos,alpha,cp)
{
simf<-rep(0,2)
uu=uniroot(Qi,c(0,1),tol=.01,x=pred,vec=datos[,1])$root
v=uniroot(pui,c(0,1),tol=.0001,t=alpha,u=uu,cop=cp)$root
simf=Q(v,datos[,2])
simf
}
rcop_alfaU<-function(pred,datos,alpha,cp)
{
simf<-rep(0,2)
uu=uniroot(Qi,c(0,1),tol=.01,x=pred,vec=datos[,1])$root
v=uniroot(pui,c(0,1),tol=.0001,t=alpha,u=uu,cop=cp)$root
v
}
rcop_reg<-function(pred,datos,cp)
{
simf<-rep(0,2)
uu=uniroot(Qi,c(0,1),tol=.0001,x=pred,vec=datos[,1])$root
v=uniroot(pui,c(0,1),tol=.001,t=.5,u=uu,cop=cp)$root
simf=Q(v,datos[,2])
simf
}
reg_bandas<-function(datos)
{
a=sort(datos[,1])
n=length(datos[,1])
x=seq(a[5],a[n-5],.01)
copu=cee(datos)
reg=sapply(x,rcop_reg,datos=datos,cp=copu)
#print("mediana")
reg_25=sapply(x,rcop_alfa,datos=datos,alpha=.25,cp=copu)
reg_75=sapply(x,rcop_alfa,datos=datos,alpha=.75,cp=copu)
par(mar=c(4.5,4.5,0.5,0.5),font.axis = 2,font.lab=2)
plot(datos,lwd=2,col="gray50",pch=19,xlab='U1',ylab='U2',cex.lab=1.5, cex.axis=1.5)
lines(x,reg,lwd=4)
lines(x,reg_25,lwd=3,col="blue")
lines(x,reg_75,lwd=3,col="blue")
}
cargam3<-function(i,n)
{
r=floor(i/n)+1
c=i-(r-1)*n+1
r*c/n^2
}
s.w.e<-function(datos)
{
cp=cee(datos)
n=length(cp[,1])-1
12*sum(abs(cp[2:(n+1),2:(n+1)]-
matrix(sapply(0:(n*n-1),cargam3,n),ncol=n)))/(n^2-1)
}
colnames(baseTotal)
colnames(redTotal)
reg_bandas(baseTotal[c(1,4)])
reg_bandas<-function(datos)
{
a=sort(datos[,1])
n=length(datos[,1])
x=seq(a[5],a[n-5],.01)
copu=cee(datos)
reg=sapply(x,rcop_reg,datos=datos,cp=copu)
#print("mediana")
reg_25=sapply(x,rcop_alfa,datos=datos,alpha=.25,cp=copu)
reg_75=sapply(x,rcop_alfa,datos=datos,alpha=.75,cp=copu)
par(mar=c(4.5,4.5,0.5,0.5),font.axis = 2,font.lab=2)
plot(datos,lwd=2,col="gray50",pch=19,xlab='X1',ylab='X2',cex.lab=1.5, cex.axis=1.5)
lines(x,reg,lwd=4)
lines(x,reg_25,lwd=3,col="blue")
lines(x,reg_75,lwd=3,col="blue")
}
reg_bandas(baseTotal[c(1,4)])
#Funcion que graficas la diagonal de la copulas
#Recibe como argumentos:
#datos - un data frame con los datos a los cuales se les quiere
#modelar con copulas
diagonal<-function(datos){
copula <- cee(datos)
d <- dim(copula)
diag <- vector(mode="numeric",length=d[1])
for(i in 1:d[1]){
diag[i] <- copula[i,i]
}
#Las funciones
Md<-function(u) u
Pd<-function(u) u^2
Wd<-function(u) max(2*u-1,0)
w=sapply(seq(0,1,1/(d[1]-1)), Wd)
p=sapply(seq(0,1,1/(d[1]-1)), Pd)
m=sapply(seq(0,1,1/(d[1]-1)), Md)
val <- data.frame('x' = seq(0,1,1/(d[1]-1)), 'Diag' = diag,
'Superior' = m, 'Pi' = p, 'Inferior' = w)
new <- val %>% pivot_longer(!x, names_to = "curva", values_to = "valores")
#Grafica
graf <- ggplot(new, aes(x=x, y=valores, group = curva, color = curva, size = 2)) +
geom_line() +
scale_color_manual(values = c('black', "darkred", "darkblue", 'darkgreen')) +
geom_line()
#df=diag[-c(1,d[1])]-p[-c(1,d[1])]
return(graf)
}
diagonal(baseTotal[c(1,4)])
#Funcion que graficas la diagonal de la copulas
#Recibe como argumentos:
#datos - un data frame con los datos a los cuales se les quiere
#modelar con copulas
diagonal<-function(datos){
copula <- cee(datos)
d <- dim(copula)
diag <- vector(mode="numeric",length=d[1])
for(i in 1:d[1]){
diag[i] <- copula[i,i]
}
#Las funciones
Md<-function(u) u
Pd<-function(u) u^2
Wd<-function(u) max(2*u-1,0)
w=sapply(seq(0,1,1/(d[1]-1)), Wd)
p=sapply(seq(0,1,1/(d[1]-1)), Pd)
m=sapply(seq(0,1,1/(d[1]-1)), Md)
val <- data.frame('x' = seq(0,1,1/(d[1]-1)), 'Diag' = diag,
'Superior' = m, 'Pi' = p, 'Inferior' = w)
new <- val %>% pivot_longer(!x, names_to = "curva", values_to = "valores")
#Grafica
graf <- ggplot(new, aes(x=x, y=valores, group = curva, color = curva, size = 1.2)) +
geom_line() +
scale_color_manual(values = c('black', "darkred", "darkblue", 'darkgreen')) +
geom_line()
#df=diag[-c(1,d[1])]-p[-c(1,d[1])]
return(graf)
}
diagonal(baseTotal[c(1,4)])
#Funcion que graficas la diagonal de la copulas
#Recibe como argumentos:
#datos - un data frame con los datos a los cuales se les quiere
#modelar con copulas
diagonal<-function(datos){
copula <- cee(datos)
d <- dim(copula)
diag <- vector(mode="numeric",length=d[1])
for(i in 1:d[1]){
diag[i] <- copula[i,i]
}
#Las funciones
Md<-function(u) u
Pd<-function(u) u^2
Wd<-function(u) max(2*u-1,0)
w=sapply(seq(0,1,1/(d[1]-1)), Wd)
p=sapply(seq(0,1,1/(d[1]-1)), Pd)
m=sapply(seq(0,1,1/(d[1]-1)), Md)
val <- data.frame('x' = seq(0,1,1/(d[1]-1)), 'Diag' = diag,
'Superior' = m, 'Pi' = p, 'Inferior' = w)
new <- val %>% pivot_longer(!x, names_to = "curva", values_to = "valores")
#Grafica
graf <- ggplot(new, aes(x=x, y=valores, group = curva, color = curva, size = 1)) +
geom_line() +
scale_color_manual(values = c('black', "darkred", "darkblue", 'darkgreen')) +
geom_line()
#df=diag[-c(1,d[1])]-p[-c(1,d[1])]
return(graf)
}
diagonal(baseTotal[c(1,4)])
#Funcion que graficas la diagonal de la copulas
#Recibe como argumentos:
#datos - un data frame con los datos a los cuales se les quiere
#modelar con copulas
diagonal<-function(datos){
copula <- cee(datos)
d <- dim(copula)
diag <- vector(mode="numeric",length=d[1])
for(i in 1:d[1]){
diag[i] <- copula[i,i]
}
#Las funciones
Md<-function(u) u
Pd<-function(u) u^2
Wd<-function(u) max(2*u-1,0)
w=sapply(seq(0,1,1/(d[1]-1)), Wd)
p=sapply(seq(0,1,1/(d[1]-1)), Pd)
m=sapply(seq(0,1,1/(d[1]-1)), Md)
val <- data.frame('x' = seq(0,1,1/(d[1]-1)), 'Diag' = diag,
'Superior' = m, 'Pi' = p, 'Inferior' = w)
new <- val %>% pivot_longer(!x, names_to = "curva", values_to = "valores")
#Grafica
graf <- ggplot(new, aes(x=x, y=valores, group = curva, color = curva)) +
geom_line(size = 1.2) +
scale_color_manual(values = c('black', "darkred", "darkblue", 'darkgreen')) +
geom_line()
#df=diag[-c(1,d[1])]-p[-c(1,d[1])]
return(graf)
}
diagonal(baseTotal[c(1,4)])
diagonal(redTotal[c(1,4)])
diagonal<-function(datos,nombre)
{
copula=cee(datos)
d=dim(copula)
diag=vector(mode="numeric",length=d[1])
for(i in 1:d[1])
{
diag[i]=copula[i,i]
}
Md<-function(u) u
Pd<-function(u) u^2
Wd<-function(u) max(2*u-1,0)
w=sapply(seq(0,1,.01),Wd)
p=sapply(seq(0,1,1/(d[1]-1)),Pd)
m=sapply(seq(0,1,1/(d[1]-1)),Md)
plot(seq(0,1,.01),w,type="l",col="red",main=nombre)
lines(seq(0,1,1/(d[1]-1)),p,col="blue")
lines(seq(0,1,1/(d[1]-1)),m,col="green")
lines(seq(0,1,1/(d[1]-1)),diag,col=30)
df=diag[-c(1,d[1])]-p[-c(1,d[1])]
}
reg_bandas(redTotal[c(1,4)])
reg_bandas<-function(datos)
{
a=sort(datos[,1])
n=length(datos[,1])
x=seq(a[7],a[n-7],.01)
copu=cee(datos)
reg=sapply(x,rcop_reg,datos=datos,cp=copu)
#print("mediana")
reg_25=sapply(x,rcop_alfa,datos=datos,alpha=.25,cp=copu)
reg_75=sapply(x,rcop_alfa,datos=datos,alpha=.75,cp=copu)
par(mar=c(4.5,4.5,0.5,0.5),font.axis = 2,font.lab=2)
plot(datos,lwd=2,col="gray50",pch=19,xlab='X1',ylab='X2',cex.lab=1.5, cex.axis=1.5)
lines(x,reg,lwd=4)
lines(x,reg_25,lwd=3,col="blue")
lines(x,reg_75,lwd=3,col="blue")
}
reg_bandas(redTotal[c(1,4)])
reg_bandas<-function(datos)
{
a=sort(datos[,1])
n=length(datos[,1])
x=seq(a[3],a[n-3],.01)
copu=cee(datos)
reg=sapply(x,rcop_reg,datos=datos,cp=copu)
#print("mediana")
reg_25=sapply(x,rcop_alfa,datos=datos,alpha=.25,cp=copu)
reg_75=sapply(x,rcop_alfa,datos=datos,alpha=.75,cp=copu)
par(mar=c(4.5,4.5,0.5,0.5),font.axis = 2,font.lab=2)
plot(datos,lwd=2,col="gray50",pch=19,xlab='X1',ylab='X2',cex.lab=1.5, cex.axis=1.5)
lines(x,reg,lwd=4)
lines(x,reg_25,lwd=3,col="blue")
lines(x,reg_75,lwd=3,col="blue")
}
reg_bandas(redTotal[c(1,4)])
reg_bandas<-function(datos)
{
a=sort(datos[,1])
n=length(datos[,1])
x=seq(a[10],a[n-10],.01)
copu=cee(datos)
reg=sapply(x,rcop_reg,datos=datos,cp=copu)
#print("mediana")
reg_25=sapply(x,rcop_alfa,datos=datos,alpha=.25,cp=copu)
reg_75=sapply(x,rcop_alfa,datos=datos,alpha=.75,cp=copu)
par(mar=c(4.5,4.5,0.5,0.5),font.axis = 2,font.lab=2)
plot(datos,lwd=2,col="gray50",pch=19,xlab='X1',ylab='X2',cex.lab=1.5, cex.axis=1.5)
lines(x,reg,lwd=4)
lines(x,reg_25,lwd=3,col="blue")
lines(x,reg_75,lwd=3,col="blue")
}
reg_bandas(redTotal[c(1,4)])
